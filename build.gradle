apply from: "utils.gradle"

buildscript {
    def supportVersion = '23.1.0'
    def xdroidVersion = '0.3.0'
    extensions.add("libs", [
            androidAppCompat   : "com.android.support:appcompat-v7:" + supportVersion,
            androidDesign      : "com.android.support:design:" + supportVersion,
            androidGradlePlugin: "com.android.tools.build:gradle:1.3.1",
            deployGate         : "com.deploygate:gradle:0.6.2",
            jUnit              : "junit:junit:4.12",
            gradleMvnPush      : new File(rootDir, 'gradle-mvn-push.gradle').absolutePath,
            libCommon          : project(":lib-common"),
            mockito            : "org.mockito:mockito-core:1.10.19",
            rollbar            : files("libs/rollbar-android-0.1.2.jar"),
            sdkManager         : "com.jakewharton.sdkmanager:gradle-plugin:0.12.0",
            xdroidAdapter      : "com.shamanland:xdroid-adapter:" + xdroidVersion,
            xdroidApp          : "com.shamanland:xdroid-app:" + xdroidVersion,
            xdroidCollections  : "com.shamanland:xdroid-collections:" + xdroidVersion,
            xdroidCore         : "com.shamanland:xdroid-core:" + xdroidVersion,
            xdroidCustomService: "com.shamanland:xdroid-customservice:" + xdroidVersion,
            xdroidEnumFormat   : "com.shamanland:xdroid-enum-format:" + xdroidVersion,
            xdroidInflater     : "com.shamanland:xdroid-inflater:" + xdroidVersion,
            xdroidOptions      : "com.shamanland:xdroid-options:" + xdroidVersion,
            xdroidToaster      : "com.shamanland:xdroid-toaster:" + xdroidVersion,
            xdroidViewHolder   : "com.shamanland:xdroid-viewholder:" + xdroidVersion,
            xdroidWidget       : "com.shamanland:xdroid-widger:" + xdroidVersion,
    ])
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath libs.androidGradlePlugin
        classpath libs.deployGate
        classpath libs.sdkManager
    }
}

subprojects {
    group GROUP
    version({ name, suffix -> suffix.isEmpty() ? name : name + "." + suffix }.call(VERSION_NAME as String, VERSION_NAME_SUFFIX as String))

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    apply plugin: "android-sdk-manager"

    if (!name.equals("app")) {
        apply plugin: "com.android.library"
    } else {
        apply plugin: "com.android.application"
        apply plugin: "deploygate"

        android {
            defaultConfig {
                applicationId APP_ID as String
                versionCode VERSION_CODE as int
                versionName version

                buildConfigField "String", "ROLLBAR_TOKEN", toJavaCodeString(ROLLBAR_TOKEN as String)
            }

            signingConfigs {
                debug {
                    storeFile new File(rootProject.rootDir, "debug.keystore")
                }

                release {
                    storeFile new File(rootProject.rootDir, STORE_FILE as String)
                    storePassword STORE_PASSWORD as String
                    keyAlias KEY_ALIAS as String
                    keyPassword KEY_PASSWORD as String
                }
            }

            buildTypes {
                release {
                    if ({ f -> f.isFile() && f.exists() }.call(signingConfigs.release.storeFile)) {
                        signingConfig signingConfigs.release
                    }
                }
            }
        }

        deploygate {
            userName = DEPLOYGATE_USERNAME as String
            token = DEPLOYGATE_TOKEN as String

            apks {
                debug {
                    sourceFile = file("build/outputs/apk/" + project.name + "-debug.apk")
                }
            }
        }
    }

    android {
        compileSdkVersion COMPILE_SDK_VERSION as int
        buildToolsVersion BUILD_TOOLS_VERSION as String

        defaultConfig {
            minSdkVersion MIN_SDK_VERSION as int
            targetSdkVersion TARGET_SDK_VERSION as int

            // workaround for https://code.google.com/p/android/issues/detail?id=52962
            String snapshot = (SNAPSHOT as boolean) ? "Boolean.parseBoolean(\"true\")" : "false"
            buildConfigField "boolean", "SNAPSHOT", snapshot

            String production = (SNAPSHOT as boolean && (VERSION_NAME_SUFFIX as String).isEmpty()) ? "Boolean.parseBoolean(\"false\")" : "true"
            buildConfigField "boolean", "PRODUCTION", production
        }

        testOptions {
            unitTests.returnDefaultValues = true
        }

        dependencies {
            testCompile libs.jUnit
            testCompile libs.mockito
        }
    }
}

task changeTemplate << {
    def readProperty = { String name, String defaultValue ->
        if (rootProject.hasProperty(name)) {
            def result = rootProject.property(name) as String
            if (result ==~ /([a-z_][a-z0-9_]*\.?)*/) {
                return result
            } else {
                throw new IllegalArgumentException(name + " is illegal: " + result)
            }
        } else if (defaultValue != null) {
            return defaultValue
        } else {
            throw new IllegalArgumentException("Could not find property '" + name + "'")
        }
    }

    def appIdOld = readProperty("templateAppIdOld", "com.shamanland.template")
    def appIdNew = readProperty("templateAppIdNew", null)

    def traverseFiles
    traverseFiles = { File root, Collection<String> exts, Closure<File> handler ->
        if (root.isHidden()) {
            return
        }

        def files = root.listFiles()
        for (def f : files) {
            if (f.isFile()) {
                if (exts.contains(f.getName().split("\\.").last())) {
                    handler(f)
                }
            } else {
                traverseFiles(f, exts, handler)
            }
        }
    }

    traverseFiles(rootDir, new HashSet<>(Arrays.asList("java", "xml", "gradle", "properties")), { File f ->
        println("TEMP: " + f.getName())
    })
}
